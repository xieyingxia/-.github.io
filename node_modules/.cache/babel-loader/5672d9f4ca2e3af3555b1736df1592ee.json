{"ast":null,"code":"/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport * as React from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nimport { invariant } from '@formatjs/intl-utils';\nconst MINUTE = 60;\nconst HOUR = 60 * 60;\nconst DAY = 60 * 60 * 24;\n\nfunction selectUnit(seconds) {\n  const absValue = Math.abs(seconds);\n\n  if (absValue < MINUTE) {\n    return 'second';\n  }\n\n  if (absValue < HOUR) {\n    return 'minute';\n  }\n\n  if (absValue < DAY) {\n    return 'hour';\n  }\n\n  return 'day';\n}\n\nfunction getDurationInSeconds(unit) {\n  switch (unit) {\n    case 'second':\n      return 1;\n\n    case 'minute':\n      return MINUTE;\n\n    case 'hour':\n      return HOUR;\n\n    default:\n      return DAY;\n  }\n}\n\nfunction valueToSeconds(value, unit) {\n  if (!value) {\n    return 0;\n  }\n\n  switch (unit) {\n    case 'second':\n      return value;\n\n    case 'minute':\n      return value * MINUTE;\n\n    default:\n      return value * HOUR;\n  }\n}\n\nconst INCREMENTABLE_UNITS = ['second', 'minute', 'hour'];\n\nfunction canIncrement(unit = 'second') {\n  return INCREMENTABLE_UNITS.includes(unit);\n}\n\nexport class FormattedRelativeTime extends React.PureComponent {\n  constructor(props) {\n    super(props); // Public for testing\n\n    this._updateTimer = null;\n    this.state = {\n      prevUnit: this.props.unit,\n      prevValue: this.props.value,\n      currentValueInSeconds: canIncrement(this.props.unit) ? valueToSeconds(this.props.value, this.props.unit) : 0\n    };\n    invariant(!props.updateIntervalInSeconds || !!(props.updateIntervalInSeconds && canIncrement(props.unit)), 'Cannot schedule update with unit longer than hour');\n  }\n\n  scheduleNextUpdate({\n    updateIntervalInSeconds,\n    unit\n  }, {\n    currentValueInSeconds\n  }) {\n    clearTimeout(this._updateTimer);\n    this._updateTimer = null; // If there's no interval and we cannot increment this unit, do nothing\n\n    if (!updateIntervalInSeconds || !canIncrement(unit)) {\n      return;\n    } // Figure out the next interesting time\n\n\n    const nextValueInSeconds = currentValueInSeconds - updateIntervalInSeconds;\n    const nextUnit = selectUnit(nextValueInSeconds); // We've reached the max auto incrementable unit, don't schedule another update\n\n    if (nextUnit === 'day') {\n      return;\n    }\n\n    const unitDuration = getDurationInSeconds(nextUnit);\n    const remainder = nextValueInSeconds % unitDuration;\n    const prevInterestingValueInSeconds = nextValueInSeconds - remainder;\n    const nextInterestingValueInSeconds = prevInterestingValueInSeconds >= currentValueInSeconds ? prevInterestingValueInSeconds - unitDuration : prevInterestingValueInSeconds;\n    const delayInSeconds = Math.abs(nextInterestingValueInSeconds - currentValueInSeconds);\n    this._updateTimer = setTimeout(() => this.setState({\n      currentValueInSeconds: nextInterestingValueInSeconds\n    }), delayInSeconds * 1e3);\n  }\n\n  componentDidMount() {\n    this.scheduleNextUpdate(this.props, this.state);\n  }\n\n  componentDidUpdate() {\n    this.scheduleNextUpdate(this.props, this.state);\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this._updateTimer);\n    this._updateTimer = null;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.unit !== state.prevUnit || props.value !== state.prevValue) {\n      return {\n        prevValue: props.value,\n        prevUnit: props.unit,\n        currentValueInSeconds: canIncrement(props.unit) ? valueToSeconds(props.value, props.unit) : 0\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    return React.createElement(Context.Consumer, null, intl => {\n      invariantIntlContext(intl);\n      const formatRelativeTime = intl.formatRelativeTime,\n            Text = intl.textComponent;\n      const _this$props = this.props,\n            children = _this$props.children,\n            value = _this$props.value,\n            unit = _this$props.unit,\n            updateIntervalInSeconds = _this$props.updateIntervalInSeconds;\n      const currentValueInSeconds = this.state.currentValueInSeconds;\n      let currentValue = value || 0;\n      let currentUnit = unit;\n\n      if (canIncrement(unit) && typeof currentValueInSeconds === 'number' && updateIntervalInSeconds) {\n        currentUnit = selectUnit(currentValueInSeconds);\n        const unitDuration = getDurationInSeconds(currentUnit);\n        currentValue = Math.round(currentValueInSeconds / unitDuration);\n      }\n\n      const formattedRelativeTime = formatRelativeTime(currentValue, currentUnit, Object.assign({}, this.props));\n\n      if (typeof children === 'function') {\n        return children(formattedRelativeTime);\n      }\n\n      if (Text) {\n        return React.createElement(Text, null, formattedRelativeTime);\n      }\n\n      return formattedRelativeTime;\n    });\n  }\n\n}\nFormattedRelativeTime.displayName = 'FormattedRelativeTime';\nFormattedRelativeTime.defaultProps = {\n  value: 0,\n  unit: 'second'\n};\nexport default FormattedRelativeTime;","map":{"version":3,"sources":["/Users/xiangmingxin/个人项目/react_shop/react/react_shop/node_modules/_react-intl@3.11.0@react-intl/lib/components/relative.js"],"names":["React","Context","invariantIntlContext","invariant","MINUTE","HOUR","DAY","selectUnit","seconds","absValue","Math","abs","getDurationInSeconds","unit","valueToSeconds","value","INCREMENTABLE_UNITS","canIncrement","includes","FormattedRelativeTime","PureComponent","constructor","props","_updateTimer","state","prevUnit","prevValue","currentValueInSeconds","updateIntervalInSeconds","scheduleNextUpdate","clearTimeout","nextValueInSeconds","nextUnit","unitDuration","remainder","prevInterestingValueInSeconds","nextInterestingValueInSeconds","delayInSeconds","setTimeout","setState","componentDidMount","componentDidUpdate","componentWillUnmount","getDerivedStateFromProps","render","createElement","Consumer","intl","formatRelativeTime","Text","textComponent","children","currentValue","currentUnit","round","formattedRelativeTime","Object","assign","displayName","defaultProps"],"mappings":"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","sourcesContent":["/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport * as React from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nimport { invariant } from '@formatjs/intl-utils';\nconst MINUTE = 60;\nconst HOUR = 60 * 60;\nconst DAY = 60 * 60 * 24;\nfunction selectUnit(seconds) {\n    const absValue = Math.abs(seconds);\n    if (absValue < MINUTE) {\n        return 'second';\n    }\n    if (absValue < HOUR) {\n        return 'minute';\n    }\n    if (absValue < DAY) {\n        return 'hour';\n    }\n    return 'day';\n}\nfunction getDurationInSeconds(unit) {\n    switch (unit) {\n        case 'second':\n            return 1;\n        case 'minute':\n            return MINUTE;\n        case 'hour':\n            return HOUR;\n        default:\n            return DAY;\n    }\n}\nfunction valueToSeconds(value, unit) {\n    if (!value) {\n        return 0;\n    }\n    switch (unit) {\n        case 'second':\n            return value;\n        case 'minute':\n            return value * MINUTE;\n        default:\n            return value * HOUR;\n    }\n}\nconst INCREMENTABLE_UNITS = ['second', 'minute', 'hour'];\nfunction canIncrement(unit = 'second') {\n    return INCREMENTABLE_UNITS.includes(unit);\n}\nexport class FormattedRelativeTime extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        // Public for testing\n        this._updateTimer = null;\n        this.state = {\n            prevUnit: this.props.unit,\n            prevValue: this.props.value,\n            currentValueInSeconds: canIncrement(this.props.unit)\n                ? valueToSeconds(this.props.value, this.props.unit)\n                : 0,\n        };\n        invariant(!props.updateIntervalInSeconds ||\n            !!(props.updateIntervalInSeconds && canIncrement(props.unit)), 'Cannot schedule update with unit longer than hour');\n    }\n    scheduleNextUpdate({ updateIntervalInSeconds, unit }, { currentValueInSeconds }) {\n        clearTimeout(this._updateTimer);\n        this._updateTimer = null;\n        // If there's no interval and we cannot increment this unit, do nothing\n        if (!updateIntervalInSeconds || !canIncrement(unit)) {\n            return;\n        }\n        // Figure out the next interesting time\n        const nextValueInSeconds = currentValueInSeconds - updateIntervalInSeconds;\n        const nextUnit = selectUnit(nextValueInSeconds);\n        // We've reached the max auto incrementable unit, don't schedule another update\n        if (nextUnit === 'day') {\n            return;\n        }\n        const unitDuration = getDurationInSeconds(nextUnit);\n        const remainder = nextValueInSeconds % unitDuration;\n        const prevInterestingValueInSeconds = nextValueInSeconds - remainder;\n        const nextInterestingValueInSeconds = prevInterestingValueInSeconds >= currentValueInSeconds\n            ? prevInterestingValueInSeconds - unitDuration\n            : prevInterestingValueInSeconds;\n        const delayInSeconds = Math.abs(nextInterestingValueInSeconds - currentValueInSeconds);\n        this._updateTimer = setTimeout(() => this.setState({\n            currentValueInSeconds: nextInterestingValueInSeconds,\n        }), delayInSeconds * 1e3);\n    }\n    componentDidMount() {\n        this.scheduleNextUpdate(this.props, this.state);\n    }\n    componentDidUpdate() {\n        this.scheduleNextUpdate(this.props, this.state);\n    }\n    componentWillUnmount() {\n        clearTimeout(this._updateTimer);\n        this._updateTimer = null;\n    }\n    static getDerivedStateFromProps(props, state) {\n        if (props.unit !== state.prevUnit || props.value !== state.prevValue) {\n            return {\n                prevValue: props.value,\n                prevUnit: props.unit,\n                currentValueInSeconds: canIncrement(props.unit)\n                    ? valueToSeconds(props.value, props.unit)\n                    : 0,\n            };\n        }\n        return null;\n    }\n    render() {\n        return (React.createElement(Context.Consumer, null, (intl) => {\n            invariantIntlContext(intl);\n            const { formatRelativeTime, textComponent: Text } = intl;\n            const { children, value, unit, updateIntervalInSeconds } = this.props;\n            const { currentValueInSeconds } = this.state;\n            let currentValue = value || 0;\n            let currentUnit = unit;\n            if (canIncrement(unit) &&\n                typeof currentValueInSeconds === 'number' &&\n                updateIntervalInSeconds) {\n                currentUnit = selectUnit(currentValueInSeconds);\n                const unitDuration = getDurationInSeconds(currentUnit);\n                currentValue = Math.round(currentValueInSeconds / unitDuration);\n            }\n            const formattedRelativeTime = formatRelativeTime(currentValue, currentUnit, Object.assign({}, this.props));\n            if (typeof children === 'function') {\n                return children(formattedRelativeTime);\n            }\n            if (Text) {\n                return React.createElement(Text, null, formattedRelativeTime);\n            }\n            return formattedRelativeTime;\n        }));\n    }\n}\nFormattedRelativeTime.displayName = 'FormattedRelativeTime';\nFormattedRelativeTime.defaultProps = {\n    value: 0,\n    unit: 'second',\n};\nexport default FormattedRelativeTime;\n"]},"metadata":{},"sourceType":"module"}